import golly as g 

#recipe = "11011101101101110001110101000101001110010110111100100111010100101100011001101110111"
#recipe += #"1101110100101011111110110110011010101000011000110111110011110101011101010101111011001111110110111101001110100111101001110001110#010110101011111"

glds = [[],[]]

glds[0] = g.parse("3o$o$bo!")
glds[1] = g.evolve(g.parse("3o$o$bo!"), 2)
#blck = g.parse("2o$2o!", -4, 0)

def place_glider(i, dx, dy):
	if i%2 == 0:
		g.putcells(glds[0], 15 * int(i/2) + dx, 15 * int(i/2) + dy)
	else:
		g.putcells(glds[1], 8 + 15 * int(i/2) + dx, 8 + 15 * int(i/2) + dy)

		
class ArmP30:
	def __init__(self):
		self.recipe = ""
		self.move_recipes = {}
		self.shoot_recipes = {}
		self.arm_ext = -22
		
	def load_recipes(self):
		path = path = r'C:\Users\SimSim314\Documents\GitHub\GreyGooTheory\P30Gemini'

		file = open(path + r'\shoot.recipe.txt', 'r')
		
		for line in file:
			recipe = line.split(":")
			recipe[1] = int(recipe[1].replace("B", ""))
			recipe[2] = int(recipe[2].replace("G", ""))
			recipe[3] += "0"
			
			self.shoot_recipes[recipe[0]] = recipe 
		
		file.close()

		file = open(path + r'\move.recipe.txt', 'r')
		
		for line in file:
			recipe = line.split(":")
			self.move_recipes[-int(recipe[0])] = recipe[1] + "0"
		
		file.close()

	def apply_move(self, d):
		if d <= 100 and d >= -100:
			self.recipe += self.move_recipes[d]
			self.arm_ext += 2 * d
			
		else:
			if d > 100:
				self.recipe += self.move_recipes[100]
				self.arm_ext += 2 * 100
				self.apply_move(d - 100)
			else:
				self.recipe += self.move_recipes[-100]
				self.arm_ext -= 2 * 100
				self.apply_move(d + 100)
		
	def apply_shoot(self, d):
		recipe = self.shoot_recipes[d][3]
		self.recipe += recipe
		self.arm_ext += 2 * self.shoot_recipes[d][1]
		
	def place(self, x, y):
		idx = 0 
		for i in self.recipe:
			if i == "1":
				place_glider(idx, x, y)
			idx += 1
			
	def apply_slmake(self, slm, dR = 0):
		if slm[0] == "E":
			slm = int(slm.replace("E",""))
			slm += dR 
			
			if slm % 2 == 1:
				shoot = self.shoot_recipes["xy-E-type-E"]
			else: 
				shoot = self.shoot_recipes["xy-O-type-E"]
		
		else: 
			slm = int(slm.replace("O",""))
			slm += dR
			
			if slm % 2 == 1:
				shoot = self.shoot_recipes["xy-E-type-O"]
			else: 
				shoot = self.shoot_recipes["xy-O-type-O"]
		
		d = shoot[2]
		slm -= d
		move_d = (slm - self.arm_ext) / 2 
		self.apply_move(move_d)
		self.apply_shoot(shoot[0])
				
def place_geminoid():
	geminiod_pat = g.parse("15$157b2o$157bobo$158bo3$160b2o$159bo2bo$160bobo$161bo7$171b2o$171b2o29$122bo$121bobo$121b2o3$95b2o33b2o$94bobo32bo2bo$95bo33bobo$130bo4$115b2o$100b2o12bobo$99bo2bo10bobo$99bobo12bo$100bo2$75b2o123b2o$74bobo123b2o$75bo2$116bo$115bobo41bo$114bobo41bobo$114b2o42b2o$141b2o$141bobo$131b2o9b2o9b2o$119b2o9bobo20b2o$119b2o9b2o18$159bo$158bobo8b2o$157bobo8bobo$157b2o8bobo$168bo2$180bo$178b3o$146b2o29bo$145bobo29b2o$146bo4$158b2o84b2o$158b2o84b2o$151b2o$150bo2bo20b2o$150bobo20bobo$151bo21b2o$144b2o$143bobo$144bo6$171b2o$171bobo$172b2o10$173b2o37b2o$173b2o37bo$210bobo$210b2o2$169b2o30b2o$168bobo7b2o20bobo$169bo8b2o9b2o9b2o$189bobo$190b2o$173b2o42b2o$172bobo41bobo$173bo41bobo$216bo5$305b2o$304bo2bo$218bo24bo61bobo$204b2o11bobo22bobo61bo4bo$204b2o10bobo23b2o66bobo$216b2o93b2o3$238b2o$202bo35b2o$201bobo$200bo2bo$201b2o3$210b2o$209bobo$198b2o10bo$197bobo$198bo40b2o$239bobo$240b2o8$75bo$74bobo161b2o21bo$74b2o161bobo20bobo$237b2o20bo2bo$260b2o6$266bo$265bobo$265b2o$237b2o$237b2o2$244bo$243bobo8b2o$242bobo8bobo$242b2o8bobo$253bo11$51bo201bo$50bobo199bobo$51b2o198bo2bo$68b2o182b2o$67bobo6b2o$67b2o7b2o$261b2o$57b2o201bobo$56bobo202bo$56bo$55b2o15$96b2o$96b2o7$97b2o$96bobo$96b2o9$93b2o$94bo$91b3o$91bo4$206b2o$205bobo$206bo6$282b3o$282bo$283bo24$242bo$241b2o$241bobo23$214b2o$213b2o$215bo19$189b2o$189bobo$189bo!")
	
	g.putcells(geminiod_pat)

arm = ArmP30()
arm.load_recipes()
Gemini_recipe = '''E-7 E-14 E-6 E7 E12 E0 E4 O13 O30 O28 E45 E38 E42 O51 O68 O66 E83 E85 E87 E89 E88 E91 E99 E102 E106 O115 O132 O130 E147 E140 E144 O153 O170 O168 E185 E178 E182 O191 O208 O206 E223 E225 E227 E229 E228 E231 E239 E251 E253 E255 E254 E257 E265 E277 E279 E281 E280 E283 E291 E303 E305 E307 E306 E309 E317 E329 E331 E333 E332 E335 E343 E346 E349 E351 E350 E353 E361 E364 E367 E369 E368 E371 E379 E382 E385 E387 E386 E389 E397 E400 E403 E405 E404 E407 E415 E418 E421 E423 E422 E425 E433 E436 E439 E441 E440 E443 E451 E454 E457 E459 E458 E461 E469 E472 E475 E477 E476 E479 E487 E490 E493 E495 E494 E497 E505 E508 E511 E513 E512 E515 E523 E526 E529 E531 E530 E533 E541 E544 E547 E549 E548 E551 E559 E571 E574 E572 E580 E580 E587 E585 E593 E580 E570 E577 E566 E575 E586 E585 E592 E603 E591 E588 O594 E576 E571 E571 O574 E570 O580 E582 E577 E563 O565 O565 E565 O550 E563 E564 O578 E596 E599 O598 O586 E581 O587 E560 E563 E556 E557 E554 E546 O576 O579 O576 O580 E580 E577 E568 O582 E565 O585 E586 E588 O594 E602 O605 O613 O605 E590 O583 E610 E605 E595 E598 E595 O601 E594 E604 E604 E607 O604 E591 O579 O587 E592 E601 E592 E598 O579 E584 E592 O593 E622 O615 O618 E623 E640 E638 E654 O654 O651 E647 E639 O656 E643 E642 E653 O653 O673 O681 O673 E661 O657 E647 E648 E647 E644 E619 E619 E629 E598 E590 E604 E604 E608 E612 E610 E609 E622 E623 E636 E645 O648 E647 O637 O636 O639 E609 O556 O556 E548 E548 E541 E547 E549 E516 O529 O536 O540 O538 E546 E560 O564 O567 E572 E580 E563 O566 O563 O554 O565 E562 E566 O570 E564 E567 E553 E556 O545 O551 E553 E549 O557 E556 E551 E542 E549 O546 E544 E549 E540 E523 O536 O532 O532 E529 E525 O523 E549 E546 E558 E560 E557 E562 E558 E554 E558 O557 E558 E543 E539 O554 E524 O534 E547 E556 E568 E569 E570 E561 E558 E549 E546 O562 O577 E563 E574 E566 O565 O562 O570 O577 E560 E560 E561 E558 E566 O556 E562 E568 O575 O570 O570 E523 E526 E510 E509 O520 O517 E534 E538 E542 E552 E546 E542 O529 O529 O515 O499 O496 E487 E496 O503 O511 O520 O532 E536 O524 O533 O526 E524 E525 E516 O540 O540 O530 O540 O546 E547 E543 O531 E532 E528 E528 O526 O542 O543 E549 O553 O558 E561 E557 E567 E560 O566 E559 E555 E558 E556 E548 O550 O542 O539 O545 O541 E534 O524 O521 E512 E479 E460 E450 E452 E452 E460 E460 E448 E458 E484 E487 E485 E482 E495 E497 E556 E563 E560 O560 O561 O562 E559 E571 O567 O561 E574 E571 O571 E569 E572 E576 O565 E559 O567 E554 E557 E557 O559 O569 E587 E588 E599 E602 O588 O608 O621 O589 E586 E600 O612 O590 O593 E598 E589 E560 O564 E551 O557 O565 E574 O573 O573 E570 E562 E554 E571 E567 E565 O548 O558 O566 E560 O589 E576 E586 E579 O581 E585 E606 O611 O608 O600 O609 E609 E628 O666 O682 O691 O686 O687 O680 E678 E676 E677 E686 E686 E680 E672 E678 E696 E688 O678 O639 O642 E647 E638 E655 E659 E649 E652 E649 O655 E676 O676 O675 O675 E680 E673 O671 E684 O684 O692 O675 O687 E681 E648 E639 E644 E648 E638 E647 E629 E648 E659 E607 O608 O605 O605 E600 O605 O616 E603 E608 E595 E569 O564 O565 E556 E564 O585 O585 O583 E578 E581 E584 O589 E594 E585 O590 O598 O586 E577 E589 E595 E595 E597 E594 E599 E594 E591 E596 O613 O602 O603 E601 E598 E603 O608 E599 O605 E590 O590 O597 O627 O617 O624 E632 O618 O622 O621 O638 E599 O631 O632 E622 O618 E619 O622 E634 E625 E610 E590 E590 O590 E581 E595 E602 O590 O590 E587 O588 O578 O585 O589 E589 O600 O597 O582 E592 O584 O583 E582 O601 E595 E593 O583 E585 E588 E576 E580 E592 E585 E589 E581 E577 E591 E591 E591 E588 O590 E589 O581 E574 E593 E592 E591 E590 E590 E587 O584 E591 E592 O594 O595 E594 E592 E597 O586 O580 O588 O580 O584 E586 E573 O603 E589 O579 O610 O610 O610 O620 O611 O614 O612 O601 E604 O594 O602 O590 E592 E589 O586 O584 E597 E574 E577 E577 O582 E577 O573 E581 E577 E550 E550 E546 E542 E550 E536 E536 E532 E524 E532 E518 E518 E514 E481 E474 E467 E473 E475 E445 E442 O455 E456 E464 E425 E418 E424 E426 E393 O406 O425 O422 E413 E422 E405 O376 O373 E364 E347 E349 E333 O328 O325 E316 E308 E325 O388 O389 E379 O375 E376 O379 E391 E382 E367 O340 O337 E328 E337 E450 E450 E446 E416 E408 E422 E422 E426 E320 O303 O291 O288 E279 E271 O254 O251 E242 E234 E251 E288 O300 E291 E300 E283 E273 E276 E274 E287 E280 E270 E271 E272 E245 E248 E248 O241 O255 O242 E247 E258 E254 O247 O255 O257 O238 E247 O244 O253 E272 E272 O270 E265 O263 E257 O260 E284 E269 E263 E263 E278 O280 E275 E242 E239 E231 E240 E239 O235 E236 O231 E251 E259 O257 O265 E263 E251 E243 E255 O258 E251 E247 E272 E268 O283 O281 O278 O287 O248'''.replace("\n","").split(" ")

init_recipe = "E2 E5 E-3 E-8 O2 E3 E5 E12 E9 E4 O18 E18 E28 E32 O41 O58 O56 E73 E66 E70 O79 O96 O94 E111 E104 E108 O117 O134 O132 E149 E142 E146 O155 O172 O170 E187 E180 E184 O193 O210 O208 E225 O229 O232 E237 E228 E245 O266 O269 E267 O270 E273 E266 E259 O271 O255 O252 E243 E226 E228 E212 E205 E209 O218 E245 O233 O229 E233 E228 E204 O180 O177 E284 E290 O307 O316 O311 O314 O307 E303 E318 E316 E308 E322 E322 E326 E248 E245 E250 O243 O244 E252 O250 O239 O243 O252 E240 E168 E151 E153 E137 E130 E133 E126 E127 E124 E116 E104 E107 E100 E101 E98 E90 E78 E81 E74 E75 E72 E64 E52 E53 E52 E42 O21 O25 O34 E22 O54 O53 E66".replace("\n","").split(" ")

for r in Gemini_recipe:
	arm.apply_slmake(r)
	
for r in init_recipe:
	arm.apply_slmake(r, 222)
	
arm.apply_slmake("E266")
arm.apply_slmake("O412")
arm.apply_slmake("O478")
arm.apply_slmake("E532")

arm.place(116, 443)
